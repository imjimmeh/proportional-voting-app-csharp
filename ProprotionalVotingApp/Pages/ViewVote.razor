@page "/votes/{id:long}"
@using ProportionalVotingApp.Models
@using ProportionalVotingApp.Models.DTOs
@using ProportionalVotingApp.Models.Services
@using System.ComponentModel.DataAnnotations
@inject IVotingRepository repository

@if(vote == null)
{
    <p>Loading vote...</p>
}
else
{
    <div>
        <h3>@vote.Name</h3>

        <_VoteCreator Disabled="true" vote="@vote"></_VoteCreator>

        <div class="form-group">
            <label for="createdat">Created At: </label>
            <input id="createdat" @bind-value="vote.CreatedAt" class="form-control" disabled/>
        </div>

        <div class="form-group">
            <label>@(vote.Completed ? "Completed" : "Incomplete")</label>
        </div>

         <VoteOptions CanAddOptions=true Options="vote.Options" Context="voteOption">
            <VoteOptionTemplate>
                <option value="@voteOption.Id">@voteOption.Value</option>
            </VoteOptionTemplate>
        </VoteOptions>
    </div>
}
@code {
    [Parameter]
    [Range(1, long.MaxValue)]
    public long id { get; set; }

    public VoteWithIdDTO vote;
    

    protected override async Task OnInitializedAsync()
    {
        vote = await repository.GetVoteByIdAsync(id) ?? throw new Exception($"Unable to find vote for Id {id}");
    }

}
