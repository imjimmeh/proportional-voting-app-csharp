@page "/storagetest"
@using Jim.Blazor.Store.Models.Events
@using Jim.Blazor.Store.Models.Services
@using Jim.Blazor.Store.Models.Tests
@using Jim.Blazor.Store.Services
@using Jim.Core.Store.Models.Services

@inject IStoreWriterWatcherFactory watcherFactory
@inject IBlazorStoreReader storeReader
@inject IJSRuntime JS

<h3>StorageTest</h3>

<div id="storeTest">
        <div class="form-group">
        <label for="storeKey">Key:</label>
        <input id="storeKey" type="text" @bind-value="@key" />
    </div>

    <div class="form-group">
        <label for="storeValue">Value:</label>
        <input id="storeValue" type="text" @bind-value="@value" />
    </div>

    <button type="button" @onclick="@GetFromStore">Get</button>

    <button type="button" @onclick="@SetStore">Set</button>
</div>

@code {
    IBlazorStoreWriterWatcher<TestStoreModel?>? watcher;
    
    string key = "";

    string value = "";

    protected override Task OnInitializedAsync()
    {
        watcher = watcherFactory.GetWatcher<TestStoreModel?>();
        watcher.OnStoreWrite += OnStoreWrite;

        return base.OnInitializedAsync();
    }

    async Task GetFromStore()
    {
        var result = await storeReader.GetAsync<TestStoreModel>(key);

        value = result?.TestString ?? "";
    }

    async Task SetStore()
    {
        var result = await watcher.WriteAsync(key, GenerateStore());
    }

    async void OnStoreWrite(object? sender, BlazorStoreEntryChangedEventArgs args)
    {
        var value = await storeReader.GetAsync<TestStoreModel>(args.Key);
        await JS.InvokeVoidAsync("alert", $"{args.Key} was changed to {value}");
    }

    TestStoreModel GenerateStore() => new TestStoreModel { TestString = value };
}
